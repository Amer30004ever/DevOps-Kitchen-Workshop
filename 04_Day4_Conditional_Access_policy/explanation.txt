FrogTech intends to use S3 Bucket as centralized storage between internal and external users utilizing IAM policies and Roles. you’re 
requested to Deploy an S3 beside Three users for Ahmed as an internal user with IAM policy of S3 Administrator access AWS-managed-Policy, 
Mahmoud as an external user with IAM policy allows to get objects of S3 Bucket with IP conditional restriction of his company public IP 
only, and Mostafa as an internal user and his team delegated to fetching files, with IAM Role holds the get-objects policy.Use IaC 
Terraform to build all resources and consider the below requirements specifications. and ensuring that you can destroy the S3 
(i.e. using terraform destroy command) even if the bucket is not empty.1. Resources must be created at the us-east-1 region.2. 
Resources must have tags as below:a. Key: “Environment”, Value: “terraformChamps”b. Key: “Owner”, Value: <“Your_first_name“>3. 
Preferd to use variable

=Here’s a step-by-step explanation of each setup (Ahmed, Mahmoud, and Mostafa) and the reasoning behind the use of every resource or data block:

---

### **Ahmed: Internal User with Full S3 Access**
- **Requirement**: Ahmed needs full administrator access to S3 for internal operations.
- **Solution**: Use the AWS-managed policy `AmazonS3FullAccess`.

#### **Explanation of Resources**
1. **`aws_iam_user_policy_attachment`**:
   - Attaches the managed policy `AmazonS3FullAccess` to Ahmed.
   - **Why?** Since AWS provides a pre-configured policy that grants full access to S3, there’s no need to create a custom policy. This simplifies the setup and maintenance.

---

### **Mahmoud: External User with IP-Restricted S3 Access**
- **Requirement**: Mahmoud, an external user, needs to read objects from the S3 bucket, but only from his company’s public IP (`41.45.34.102`).

#### **Explanation of Resources**
1. **`aws_iam_role`**:
   - Creates a role Mahmoud can assume to access S3.
   - **Why?** Since Mahmoud is external, granting direct access to S3 is not ideal. By using a role, you can enforce security boundaries and restrict access through the `sts:AssumeRole` API.

2. **`data.aws_iam_policy_document`**:
   - Defines a custom policy that allows `s3:GetObject` actions on specific bucket resources, but only if the request originates from Mahmoud’s company IP.
   - **Why?** The IP restriction ensures access control, making it safer to grant Mahmoud access to the bucket.

3. **`aws_iam_policy`**:
   - Converts the policy document from the `data` block into a reusable IAM policy.
   - **Why?** AWS requires policies to be in a specific format (JSON) when attaching them to roles or users.

4. **`aws_iam_role_policy_attachment`**:
   - Attaches the custom policy to Mahmoud’s role.
   - **Why?** This ensures that the policy applies when Mahmoud assumes the role.

---

### **Mostafa: Internal User with GetObject Access**
- **Requirement**: Mostafa and his team need access to fetch files from the S3 bucket, without any IP restrictions.

#### **Explanation of Resources**
1. **`data.aws_iam_policy_document`**:
   - Defines a policy allowing `s3:GetObject` actions on the bucket without any conditions.
   - **Why?** Mostafa and his team are internal users, so there’s no need for IP restrictions.

2. **`aws_iam_policy`**:
   - Converts the policy document into a reusable IAM policy.
   - **Why?** Same reasoning as for Mahmoud; AWS requires policies to be JSON formatted for attachment.

3. **`aws_iam_user_policy_attachment`**:
   - Attaches the custom `GetObject` policy to Mostafa’s user account.
   - **Why?** This allows Mostafa to access the bucket directly using his IAM credentials.

---

### **Why These Resources and Data Blocks Were Used?**
- **Separation of Access Controls**:
  - Ahmed has full administrative access via a managed policy.
  - Mahmoud has a custom policy for external access with IP restrictions.
  - Mostafa has a custom policy for internal access with no restrictions.
  
- **Use of Roles for External Access**:
  - Roles are used for Mahmoud to ensure secure delegation of access.
  
- **Custom vs Managed Policies**:
  - Managed policies (`AmazonS3FullAccess`) are used for Ahmed because they meet the requirement without extra effort.
  - Custom policies are used for Mahmoud and Mostafa to meet specific access requirements (IP restrictions, resource-specific access).

---

### **Summary Table**
| **User**    | **Resource Type**                | **Purpose**                                                                 |
|-------------|----------------------------------|-----------------------------------------------------------------------------|
| Ahmed       | `aws_iam_user_policy_attachment` | Full S3 access using AWS-managed policy `AmazonS3FullAccess`.              |
| Mahmoud     | `aws_iam_role`                   | Creates a role for external access.                                        |
|             | `data.aws_iam_policy_document`   | Defines a policy with `s3:GetObject` and IP restrictions.                  |
|             | `aws_iam_policy`                 | Converts the policy document into a usable IAM policy.                     |
|             | `aws_iam_role_policy_attachment` | Attaches the policy to Mahmoud’s role.                                     |
| Mostafa     | `data.aws_iam_policy_document`   | Defines a policy with `s3:GetObject` without restrictions.                 |
|             | `aws_iam_policy`                 | Converts the policy document into a usable IAM policy.                     |
|             | `aws_iam_user_policy_attachment` | Attaches the policy to Mostafa’s user account.                             |

This approach provides flexibility and adheres to security best practices for managing internal and external access to S3.